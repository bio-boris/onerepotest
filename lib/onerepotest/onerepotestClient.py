# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class onerepotest(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def send_data(self, params, context=None):
        """
        :param params: instance of unspecified object
        :returns: instance of unspecified object
        """
        return self._client.call_method(
            'onerepotest.send_data',
            [params], self._service_ver, context)

    def print_lines(self, text, context=None):
        """
        :param text: instance of String
        :returns: instance of Long
        """
        return self._client.call_method(
            'onerepotest.print_lines',
            [text], self._service_ver, context)

    def generate_error(self, error, context=None):
        """
        :param error: instance of String
        """
        return self._client.call_method(
            'onerepotest.generate_error',
            [error], self._service_ver, context)

    def get_deploy_config(self, context=None):
        """
        :returns: instance of mapping from String to String
        """
        return self._client.call_method(
            'onerepotest.get_deploy_config',
            [], self._service_ver, context)

    def list_ref_data(self, ref_data_path, context=None):
        """
        :param ref_data_path: instance of String
        :returns: instance of list of String
        """
        return self._client.call_method(
            'onerepotest.list_ref_data',
            [ref_data_path], self._service_ver, context)

    def local_sdk_callback(self, input, context=None):
        """
        :param input: instance of String
        :returns: multiple set - (1) parameter "output" of String, (2)
           parameter "state" of String
        """
        return self._client.call_method(
            'onerepotest.local_sdk_callback',
            [input], self._service_ver, context)

    def copy_scratch_file(self, input_file_name, output_file_name, context=None):
        """
        :param input_file_name: instance of String
        :param output_file_name: instance of String
        :returns: instance of String
        """
        return self._client.call_method(
            'onerepotest.copy_scratch_file',
            [input_file_name, output_file_name], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('onerepotest.status',
                                        [], self._service_ver, context)
